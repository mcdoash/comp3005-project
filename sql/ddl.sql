CREATE TABLE Publisher (
    Name            VARCHAR(30) PRIMARY KEY,
    Email           VARCHAR(30) NOT NULL UNIQUE,
    Address_name    VARCHAR(30) NOT NULL,
    Address_street  VARCHAR(30) NOT NULL,
    Address_city    VARCHAR(25) NOT NULL,
    Address_prov    CHAR(2)     NOT NULL,
    Address_postal  VARCHAR(10) NOT NULL,
    Address_country VARCHAR(20) NOT NULL,
    Address_phone   VARCHAR(12) NOT NULL,
    Account_name    VARCHAR(30) NOT NULL,
    Account_num     VARCHAR(25) NOT NULL,

    /* address verification will be done before db entry,
    so strict checks are not necessary/outside of scope */
    CONSTRAINT valid_email --based on https://en.wikipedia.org/wiki/Email_address constraints
        CHECK (Email ~ '(?!.*[.]{2}|[.])[a-zA-Z0-9!#$%&''*+\-\/=?^_`{|}~.]+@[a-zA-Z0-9\-]+.[a-zA-Z]+'),
    CONSTRAINT provience_length 
        CHECK (LENGTH(Address_prov) = 2),
    CONSTRAINT phone_format
        CHECK (Address_phone ~ '[0-9]{3}-[0-9]{3}-[0-9]{4}')
);


CREATE TABLE Contact (
    Number  VARCHAR(12) PRIMARY KEY,
    Name    VARCHAR(30) NOT NULL,

    CONSTRAINT number_format
        CHECK (Number ~ '[0-9]{3}-[0-9]{3}-[0-9]{4}')
);

CREATE TABLE Phone_num (
    Number          VARCHAR(12),
    Publisher       VARCHAR(30),
    Contact_role    VARCHAR(20) NOT NULL,

    PRIMARY KEY (Number, Publisher),
    FOREIGN KEY (Number)
        REFERENCES Contact (Number)
		ON DELETE CASCADE,
    FOREIGN KEY (Publisher)
        REFERENCES Publisher (Name) 
        ON DELETE CASCADE
);


CREATE TABLE Book (
    ISBN            CHAR(10)        PRIMARY KEY, 
    Title           VARCHAR(50)     NOT NULL,
    Cover           VARCHAR(50),
    Publisher       VARCHAR(30)     NOT NULL,
    Blurb           VARCHAR(2500),  -- ~500 words
    Price           numeric(5, 2)   NOT NULL,
    Page_num        SMALLINT        NOT NULL,
    Book_format     VARCHAR(20)     NOT NULL,
    Release_date    DATE            NOT NULL,
    Copies_sold     SMALLINT        NOT NULL DEFAULT 0, 
    Stock           SMALLINT        NOT NULL, 
    Sale_percent    numeric(3, 2)   NOT NULL,
    Selling         BOOLEAN         NOT NULL DEFAULT TRUE,

    FOREIGN KEY (Publisher)
        REFERENCES Publisher (Name),

    CONSTRAINT valid_isbn
        CHECK (ISBN ~ '[0-9]{9}[0-9x]'),
    CONSTRAINT positive_price
        CHECK (Price >= 0),
    CONSTRAINT positive_sold
        CHECK (Copies_sold >= 0),
    CONSTRAINT positive_stock
        CHECK (Stock >= 0),
    CONSTRAINT valid_percentage
        CHECK (Sale_percent <= 1 AND Sale_percent >= 0)
);


CREATE TABLE Genre (
    Name VARCHAR(25),
    Book CHAR(10),

    PRIMARY KEY (Name, Book),
    FOREIGN KEY (Book)
        REFERENCES Book (ISBN) 
		ON DELETE CASCADE
);

CREATE TABLE Authored (
    Author  VARCHAR(30),
    Book    CHAR(10),

    PRIMARY KEY (Author, Book),
    FOREIGN KEY (Book)
        REFERENCES Book (ISBN) 
		ON DELETE CASCADE
);


CREATE TABLE Account (
    Email VARCHAR(30) PRIMARY KEY,
    Fname VARCHAR(15) NOT NULL,
    Lname VARCHAR(20) NOT NULL,
    Password VARCHAR(30) NOT NULL,

    CONSTRAINT valid_email 
        CHECK (Email ~ '(?!.*[.]{2}|[.])[a-zA-Z0-9!#$%&''*+\-\/=?^_`{|}~.]+@[a-zA-Z0-9\-]+.[a-zA-Z]+')
);

CREATE TABLE Address (
    ID          INT         PRIMARY KEY 
                            GENERATED BY DEFAULT AS IDENTITY,
    Account     VARCHAR(30) NOT NULL,
    Fname       VARCHAR(15) NOT NULL,
    Lname       VARCHAR(20) NOT NULL,
    Street      VARCHAR(30) NOT NULL,
    City        VARCHAR(25) NOT NULL,
    Province    CHAR(2)     NOT NULL,
    Postal_code VARCHAR(10) NOT NULL,
    Country     VARCHAR(20) NOT NULL,
    Phone_num   VARCHAR(12) NOT NULL, 

    FOREIGN KEY (Account)
        REFERENCES Account (Email)
		ON DELETE CASCADE,

    CONSTRAINT provience_length 
        CHECK (LENGTH(Province) = 2),
    CONSTRAINT phone_format
        CHECK (Phone_num ~ '[0-9]{3}-[0-9]{3}-[0-9]{4}')
);

CREATE TABLE Card (
    Card_id     INT          PRIMARY KEY 
                             GENERATED BY DEFAULT AS IDENTITY,
    Account     VARCHAR(30), NOT NULL
    Card_num    CHAR(16)     NOT NULL,
    Name        VARCHAR(40)  NOT NULL,
    Expiry      Date         NOT NULL,
    CVV         VARCHAR(4)   NOT NULL,
    Address     INT          NOT NULL,

    FOREIGN KEY (Account)
        REFERENCES Account (Email)
		ON DELETE CASCADE,
    FOREIGN KEY (Address)
        REFERENCES Address (ID)
		ON DELETE CASCADE,

    CONSTRAINT card_num_length
        CHECK (LENGTH(Card_num) = 16),
    CONSTRAINT not_expired
        CHECK (Expiry > CURRENT_DATE),
    CONSTRAINT valid_cvv 
        CHECK (CVV ~ '[0-9]{3,4}')
);

CREATE TABLE Book_order (
	Number          INT             PRIMARY KEY 
                                    GENERATED BY DEFAULT AS IDENTITY,
	Account         VARCHAR(30),	NOT NULL,
	Total           numeric(8, 2)   NOT NULL,
	Billing         INT             NOT NULL,
	Ship_address    INT             NOT NULL,
	Order_date      DATE            NOT NULL DEFAULT CURRENT_DATE,
	Tracking        VARCHAR(50),
	Cur_location    VARCHAR(25)     DEFAULT 'Processing',
	Expected_date   DATE,
	Arrival_date    DATE,
	
	FOREIGN KEY (Account)
		REFERENCES Account (Email)
		ON DELETE CASCADE,
	FOREIGN KEY (Billing)
		REFERENCES Card (Card_id),
	FOREIGN KEY (Ship_address)
		REFERENCES Address (ID),

    CONSTRAINT positive_total
        CHECK (Total > 0),
    CONSTRAINT valid_dates
        CHECK (
            Expected_date >= Order_date AND
            Arrival_date >= Order_date 
        )
);

CREATE TABLE Sale (
	Book        CHAR(10),
	Order_num   INT,
	Quantity    SMALLINT        NOT NULL,
    Price       numeric(5, 2)   NOT NULL,
	
	PRIMARY KEY (Book, Order_num),
	FOREIGN KEY (Book)
		REFERENCES Book (ISBN),
	FOREIGN KEY (Order_num)
		REFERENCES Book_order (Number) 
        ON DELETE CASCADE,

    CONSTRAINT positiive_quantity
        CHECK (Quantity > 0),
	CONSTRAINT positiive_price
        CHECK (Price > 0)
);


/*VIEWS*/
--public book data that can be accessed by the storefront
CREATE MATERIALIZED VIEW Storefront AS
	SELECT ISBN, Title, Cover, Publisher, 
		   Blurb, Price, page_num, Book_format, 
		   Release_date, Stock > 0 AS inStock
	FROM Book
	WHERE Selling = TRUE
	ORDER BY Copies_sold;